#!/bin/sh
#|-*- mode:lisp -*-|#
#| A repl implementation of Common Lisp
exec ros -Q -m cl-repl -L sbcl-bin -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (unless (find-package :cl-repl)
    (ql:quickload :cl-repl :silent t)))

(defpackage :ros.script.cl-repl.3724301384
  (:use :cl))
(in-package :ros.script.cl-repl.3724301384)
(ros:include "util")

(defconstant +usage+
  ;TODO: auto-generated by unix-opts
  "A full-featured Common Lisp REPL implementation.

Usage:
  cl-repl [OPTIONS]

Options:
  --help        Show this screen and exit.
  --version     Show the version info and exit.
  --load <file> Load <file> when startup.

")

(defconstant +short-usage+ "try `cl-repl --help`")

(defconstant +versions-string+
  (concatenate 'string
	       (format nil "CL-REPL ~a - Common Lisp REPL for Roswell~%" cl-repl:+version+)
	       (let ((impl (roswell.util:config "default.lisp")))
		 (format nil "On Roswell ~a, ~a ~a~%"
			 (ros::version)
			 impl
			 (roswell.util:config (format nil "~a.version" impl))))
	       (format nil "~%(C) 2017 TANI Kojiro <kojiro0531@gmail.com>~%")))

(defun main (&rest argv)
  (declare (ignorable argv))
  (if (first argv)
      (alexandria:switch ((first argv) :test #'equal)
        ;TODO: unix-opts parses arguments, accepts short options, explains parse errors better.
                         ("--help" (format t +usage+))
                         ("--version" (format t "~a~%" cl-repl:+version+))
			 ("--load" (cl-repl:repl :load (first (last argv))))
                         (t (format t "~a~%" +short-usage+)))
      (progn
        (format t "~a~%" (concatenate 'string cl-repl:*splash* +versions-string+))
        (finish-output)
        (cl-repl:repl))))

;;; vim: set ft=lisp lisp:
